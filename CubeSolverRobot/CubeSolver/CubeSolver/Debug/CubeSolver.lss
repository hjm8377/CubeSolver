
CubeSolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a41  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000883  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000521  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019f  00000000  00000000  00001f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	80 d0       	rcall	.+256    	; 0x19a <main>
  9a:	85 c0       	rjmp	.+266    	; 0x1a6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z10Timer_initv>:

void Uart_trans_string(char *data)
{
	for(int i = 0; data[i] == '\n'; i++)
		Uart_trans(data[i]);
}
  9e:	8a ea       	ldi	r24, 0xAA	; 170
  a0:	8f bd       	out	0x2f, r24	; 47
  a2:	83 e1       	ldi	r24, 0x13	; 19
  a4:	8e bd       	out	0x2e, r24	; 46
  a6:	82 e8       	ldi	r24, 0x82	; 130
  a8:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  ac:	8e e1       	ldi	r24, 0x1E	; 30
  ae:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	93 e1       	ldi	r25, 0x13	; 19
  b6:	97 bd       	out	0x27, r25	; 39
  b8:	86 bd       	out	0x26, r24	; 38
  ba:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  c2:	87 e7       	ldi	r24, 0x77	; 119
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	9b bd       	out	0x2b, r25	; 43
  c8:	8a bd       	out	0x2a, r24	; 42
  ca:	99 bd       	out	0x29, r25	; 41
  cc:	88 bd       	out	0x28, r24	; 40
  ce:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  de:	1d bc       	out	0x2d, r1	; 45
  e0:	1c bc       	out	0x2c, r1	; 44
  e2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ea:	08 95       	ret

000000ec <_Z9Uart_Initv>:
  ec:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  fc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 106:	08 95       	ret

00000108 <_Z4initv>:
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	18 ba       	out	0x18, r1	; 24
 10e:	82 b9       	out	0x02, r24	; 2
 110:	13 b8       	out	0x03, r1	; 3
 112:	84 bb       	out	0x14, r24	; 20
 114:	15 ba       	out	0x15, r1	; 21
 116:	c3 df       	rcall	.-122    	; 0x9e <_Z10Timer_initv>
 118:	e9 df       	rcall	.-46     	; 0xec <_Z9Uart_Initv>
 11a:	78 94       	sei
 11c:	08 95       	ret

0000011e <_Z12Uart_Receivev>:
 11e:	eb e9       	ldi	r30, 0x9B	; 155
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <_Z12Uart_Receivev+0x4>
 128:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 12c:	08 95       	ret

0000012e <_Z19Uart_Receive_stringPc>:
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	8c 01       	movw	r16, r24
 138:	ec 01       	movw	r28, r24
 13a:	f1 df       	rcall	.-30     	; 0x11e <_Z12Uart_Receivev>
 13c:	8a 30       	cpi	r24, 0x0A	; 10
 13e:	19 f0       	breq	.+6      	; 0x146 <_Z19Uart_Receive_stringPc+0x18>
 140:	ee df       	rcall	.-36     	; 0x11e <_Z12Uart_Receivev>
 142:	89 93       	st	Y+, r24
 144:	fa cf       	rjmp	.-12     	; 0x13a <_Z19Uart_Receive_stringPc+0xc>
 146:	f8 01       	movw	r30, r16
 148:	10 82       	st	Z, r1
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <_Z8readDatav>:

// 문자열을 읽고 해당하는 동작 수행
void readData()
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	c0 59       	subi	r28, 0x90	; 144
 15e:	d1 40       	sbci	r29, 0x01	; 1
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
	char solution[400];	// 공식을 받을 변수
	char c1, c2;
	
	Uart_Receive_string(solution);
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	df df       	rcall	.-66     	; 0x12e <_Z19Uart_Receive_stringPc>
	
	for(int i = 0; solution[i] != '\n'; i+= 2){
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	41 f0       	breq	.+16     	; 0x186 <_Z8readDatav+0x32>
 176:	ce 01       	movw	r24, r28
 178:	03 96       	adiw	r24, 0x03	; 3
 17a:	02 96       	adiw	r24, 0x02	; 2
 17c:	fc 01       	movw	r30, r24
 17e:	32 97       	sbiw	r30, 0x02	; 2
 180:	20 81       	ld	r18, Z
 182:	2a 30       	cpi	r18, 0x0A	; 10
 184:	d1 f7       	brne	.-12     	; 0x17a <_Z8readDatav+0x26>
		
		//if (c1 == 'U' && c2 =='o')
		
		//...
	}
}
 186:	c0 57       	subi	r28, 0x70	; 112
 188:	de 4f       	sbci	r29, 0xFE	; 254
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <main>:
void cameraFunc();


int main(void)
{	
	init();
 19a:	b6 df       	rcall	.-148    	; 0x108 <_Z4initv>
	
    while (1) 
    {
		motor_init();
		// cube_init();
		while(Uart_Receive() != 'S'){// 'S'가 들어올 때 까지 대기
 19c:	c0 df       	rcall	.-128    	; 0x11e <_Z12Uart_Receivev>
 19e:	83 35       	cpi	r24, 0x53	; 83
 1a0:	e9 f7       	brne	.-6      	; 0x19c <main+0x2>
		}
		cameraFunc();
		readData();	// 공식 받고 실행
 1a2:	d8 df       	rcall	.-80     	; 0x154 <_Z8readDatav>
 1a4:	fb cf       	rjmp	.-10     	; 0x19c <main+0x2>

000001a6 <_exit>:

int main(void)
{	
	init();
	
    while (1) 
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
